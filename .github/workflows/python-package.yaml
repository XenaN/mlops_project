  on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main

  jobs:
    build_a:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Cache dependencies
          uses: actions/cache@v3
          id: cache-venv
          with:
            path: |
              venv/
              .cache/pip
            key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
            restore-keys: |
              ${{ runner.os }}-venv-
        - name: Create venv and install requirements
          if: steps.cache.outputs.cache-hit != 'true'
          run: |
            echo "Installing dependencies and caching them."
            python --version
            pwd
            python -m venv ./temp_venv
            source ./temp_venv/bin/activate
            pip install -r requirements.txt



    linter:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ["3.8", "3.9", "3.10", "3.x"]
      steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Analysing the code with pylint
        run: |
         pylint $(git ls-files '*.py')

    type_test:
      runs-on: ubuntu-latest
      needs: [build_a]
      steps:
        - run: echo "This job will run after build_a have finished"

    test_b:
      runs-on: ubuntu-latest
      needs: [build_a]
      steps:
        - run: echo "This job will run after build_a have finished, it is parallel test_a"

    deploy_ab:
      runs-on: ubuntu-latest
      needs: [type_test, test_b]
      steps:
        - run: echo "This job will run after test_a and test_ab is complete"